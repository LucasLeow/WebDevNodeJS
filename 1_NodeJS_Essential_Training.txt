-- Introduction --
	- JS thought as front-end tech (interactivity with Web apps)
		- eg: JS for Browser (DOM)
	- NodeJS, can use JS for Backend
		- Command line tools
		- Creating servers
		- Interacting with file system
		- Build Scalable event-driven applications

	- Can become fullstack with HTML, CSS and JS
	

-- 1 What is Node.js --

-- 1-1 Node.js History --
	- Created in 2009 as JS runtime based on Chrome VA engine
	- 2011: npm created
		- sharing of open-source node libraries
		- huge shift in how code was shared & maintained
	- 2015: Node.js Foundation created
		- Made up of several large companies
			- IBM, Microsoft, Paypal etc.
		- help maintain standards & growth of library
-- 1-2 Installing Node.js --

	- Current version: 
		- Include all latest features
		
	- LTS version:
		- most stable version


-- 2 Node Globals --
	- Explore what is commonly used in global namespace for typical Node.js files

-- 2-1 Inspecting global object --

	- In browser, global object called window
	- In NodeJS, global object called global
	- Global object contains:
		1) Objects
		2) Values
		3) Methods
		
		that can be used in any node.js files without having to import anything
	
	
	
		eg. console.log("Hello world");
		// same as global.console.log("Hello world");
		
	- variables created within a file have their namespace scoped to that file 
	eg. 
	
		let hello = "Hello from Node.js";
		console.log(global.hello) // is undefined because hello not scoped to global ns
		
		let name = "Lucas";
		console.log(`Hello ${name}`); // template string
		
-- 2-2 require() function --
	- typically used for importing other modules

	Some global methods and objects:
		const path = require("path");
		// "path" module, one of core modules in node.js
		// must import to use
		// "path" module used to work with paths

		
		const path = require("path");

		console.log(__dirname); // directory where file is located
		console.log(__filename); // current file path (entire)

		console.log(`The file name is ${path.basename(__filename)}`);
		
		for (let key in global) { // to view global objects
			console.log(key);
		}
		
		Bunch of global functions printed from global:
			global
			clearInterval
			clearTimeout
			setInterval
			setTimeout
			queueMicrotask
			performance
			clearImmediate
			setImmediate
			
-- 2-3 'process' global object --
	- can be accessed anywhere since its a global object 
	- to interact with current process instance
		- environment information 
		- read environment variables
		- communicate with terminal (collect info from terminal)
		- exit current process etc.
		
	Collect Info from terminal:
		- in process.argv array
		
	eg.
	
	console.log(process.argv);
	
	output:
	[
	  'C:\\Program Files\\nodejs\\node.exe',  'E:\\SelfLearning\\BackEnd\\JavaScript\\WebDevNodeJS_Course\\code\\2_Node_Globals\\2-3_processArgv.js'      
	] // path to node & path to file
	
	cmd: node 2-3_processArgv.js --user Lucas --greeting "Hello World"
	output: 
	
	[
	  'C:\\Program Files\\nodejs\\node.exe', 'E:\\SelfLearning\\BackEnd\\JavaScript\\WebDevNodeJS_Course\\code\\2_Node_Globals\\2-3_processArgv.js',     
	  '--user',
	  'Lucas',
	  '--greeting',
	  'Hello World'
	]
	
	function grab(flag) {
		let idxAfterFlag = process.argv.indexOf(flag) + 1; // indexOf returns idx of first occurrence of flag
		return process.argv[idxAfterFlag]; // idxAfterFlag contains the flag value
	}

	// provided flag is --greeting & --user respectively
	let greeting = grab("--greeting");
	let user = grab("--user");

	console.log(greeting); // Lucas
	console.log(user); // Hello World
	
-- 2-4 & 2-5 Standard Input & output --
	- Another feature of process object
	- To communicate with process while its running
	- process.stdout.write(`message to write to terminal`);
	- process.stdin.on("data", function_to_execute);
	
	eg.
	process.stdout.write("Writing to the terminal \n");
	
	const questions = [
		"What is your name?",
		"What is your favourite programming language?",
		"What is your hobby?"
	];
	
	const answers = [];
	
	function getAnswers(idx = 0) {
		process.stdout.write(`\n ${questions[idx]}`)
		process.stdout.write(` > `);
	}
	
	getAnswers()
	
	process.stdin.on("data", function(data) {
		answers.push(data.toString().trim());
		if (answers.length < questions.length) {
			getAnswers(answers.length);
		} else {
			process.exit();
		}
	});
	
	process.on("exit", () => {
		for (let i = 0; i < answers.length; i++) {
			process.stdout.write("\n");
			process.stdout.write(`Answer ${i+1} : ${answers[i]}`);
		}
	})
	
-- 2-6 Creating delay with setTimeout --
	- executes a function once after given time

	const waitTime = 3000; // 3000ms = 3s
	console.log(`Setting a ${waitTime / 1000} second delay`);
	
	setTimeout(() => {
		console.log("Timer elapsed");
	}, waitTime);
	
-- 2-7 setInterval --
	- same as setTimeout but executes function continuously after every interval
	
	
	* Refer to JSSyntax.txt : Timers to find out more details

-- 2-8 Using intervals as Progress bar --

	let currentTime = 0;
	let waitInterval = 500; // 0.5s
	let totalWaitTime = 5000; // 5s in total

	const incTime = () => {
		currentTime += waitInterval;
		const percentage = Math.floor((currentTime / totalWaitTime)* 100) ;
		process.stdout.clearLine();
		process.stdout.cursorTo(0);
		process.stdout.write(`waiting...${percentage}`);
	}

	setTimeout(() => {
		clearInterval(interval);
		process.stdout.write("\nLoading complete");
	}, totalWaitTime);

	let interval = setInterval(incTime, waitInterval);
	

-- 3 Node Modules -- 

-- 3-1 Understanding Core Modules --
	- const path = require("path"); // works with path 
	- const util = require("util"); // has util.log fn that provides timestamp etc.
	- const v8 = require("v8"); // to see memory usage of program


	- require() function to import core modules
	eg: 
		const path = require("path");
		const util = require("util");
		
		console.log(path.basename(__filename));
		
		const dirUploads = path.join(__dirname, "www", "files", "uploads");
		console.log(dirUploads);
		
		util.log(path.basename(__filename));
		
		util.log(v8.getHeapStatistics());
		
-- 3-2 Collecting info with "readline" module --
	- ask questions from terminal users
	- wrapper around stdin and stdout process
	
	eg.
	const readline = require("readline");
	const rl = readline.createInterface({
		input: process.stdin,
		output: process.stdout
		});
	
	rl.question("How do you like Node?", answer => {
		console.log(`Your answer: ${answer}`);
	})

-- 3-3 Using readline more effectively --

	- passing callback functions as arguments common in async JS
	eg.
	
	const readline = require("readline");
	const rl = readline.createInterface(
		{input: process.stdin,
		output: process.stdout
		}
	);

	const questions = [
		"What is your name?",
		"Where do you live?",
		"What are you doing later?"
	];

	function collectAnswers (questions, done) {
		const answers = [];

		const questionAnswered = answer => {
			answers.push(answer.trim());

			if (answers.length < questions.length) {
				rl.question(questions[answers.length], questionAnswered)
		   } else {
			   return done(answers);
		   }
		};
		rl.question(questions[0], questionAnswered);
	}

	collectAnswers(questions, function done(answers) {
		for(let i = 0; i < answers.length; i++) {
			console.log(answers[i]);
		}
		process.exit();
	})

-- 3-4 Exporting custom modules --
	- Every JS file is a module
	- modules are imported using the require() function
	- modules are exported using module.exports
	- all variables & functions in each file scoped to that module
	- variables and functions must be exported to be consumed by other files
	- modules can be published to npm to be shared
	- module.exports = (Whatever that should be returned) (can be single variable / function)
	eg.
	
	in customModule.js:
		let count = 0;
		const inc = () => ++count;
		const getCount = () => count;
		
		module.exports = {
			anything: true,
			who: "Lucas",
			count,
			inc,
			getCount
		};
		
	in app.js:
	
	const customModule = require("./customModule.js"); // if both file in same dir
	
	const {inc, getCount} = require("./customModule.js"); // import only the 2 fns
	
	console.log(customModule.anything); // prints true 
	console.log(customModule.inc()); //
	

-- 3-5 NodeJS Emitter Module --
	- Event emitter module: Node.js implementation of pub sub design pattern
	- require("events") module
		- create listeners and emit custom events
	- event emitter: tool to decouple logic & handle asynchronicity in JS
	
-- 3-6 Creating module from readline eg earlier --
	
	-- in collectAnswers.js --
	
		const readline = require("readline");
		const {EventEmitter} = require("events");

		const rl = readline.createInterface(
			{input: process.stdin,
			output: process.stdout
			}
		);

		module.exports = function collectAnswers (questions, done) {
			const answers = [];
			const emitter = new EventEmitter();

			const questionAnswered = answer => {
				answers.push(answer.trim());
				emitter.emit("answer", answer);

				if (answers.length < questions.length) {
					rl.question(questions[answers.length], questionAnswered)
			   } else {
				   return done(answers);
			   }
			};
			rl.question(questions[0], questionAnswered);
			return emitter;
		}

	
	-- in ask.js: --
	
		const collectAnswer = require("./3-6_collectAnswer");

		const questions = [
			"What is your name?",
			"Where do you live?",
			"What are you doing later?"
		];

		const answerEvents = collectAnswer(questions, function done(answers) {
			for(let i = 0; i < answers.length; i++) {
				console.log(answers[i]);
			}
			process.exit();
		});

		answerEvents.on("answer", answer => console.log(`The answer is ${answer}`));


-- 4 File Management & Streams Using NodeJS --

-- 4-1 Listing Directory Files using fs --

	- Module that interact with file system
	- fs Module:
		- list files & directories
		- create files & directories
		- stream files
		- change file permissions etc.
	- when working with fs module, choice to work synchronously or asynchronously
		- if working asynchronously, process can do other things
	
	eg. 
	const fs = require("fs");
	
	let files = fs.readdirSync("./"); // read current directory
		- read current directory Synchronously with blocking request
		- blocking rest of process until file is read
	console.log(files);
	
	Asynchronous: (Good to run async fn in background and other process can run)
	
	let files = fs.readdir("./", function(err, files) {
		if (err) {
			throw err;
		}
		
		console.log(files);
	})
	
-- 4-2 Reading files using fs --
	- read content of files encoded in text format
		- typically "UTF-8" format
		
	eg.
	
	
	const fs = require("fs");

	// Synchronous implementation:
	
	let ipsum = fs.readFileSync("./readme.md", "UTF-8");
	console.log(ipsum);

	// Asynchronous implementation:
	
	fs.readFile("./readme.md", "UTF-8", (err,ipsum) => {
		console.log(ipsum);
	});

-- 4-3 Writing & Appending files --

	-- Writing to file --:
	
	const fs = require("fs");

	let md_content = `
		This is a new file
		===============

		ES6 Template Strings are very cool.

		* Template Strings
		* Node File System
		* Readline CLIs
	`;

	let newFilePath = "./new.md";

	fs.writeFile(newFilePath, md_content.trim(), function (err) {
		if (err){
			throw err;
		}
		
		console.log("Markdown created");
	});
	
	-- Appending to file --:
	let add_content = "\n\n Adding new content here";

	let FilePath = "./new.md";

	fs.appendFile(FilePath, add_content.trim(), function (err) {
		if (err) {
			throw err
		}
		console.log("Markdown appended");
	});
	
-- 4-4 Creating directories -- 

	const fs = require("fs");

	dir_path = "./newDir";

	if (fs.existsSync(dir_path)) {
		console.log("Directory already exists");
	} else {
		fs.mkdir(dir_path, function(err) {
			if(err) {
				console.log(err);
			} else {
				console.log("directory created");
			}
		});
	}
	
-- 4-5 move, rename, remove files --
	- same thing can be used on directory (for renaming)
	
		Directory path eg:
		- .assets/logs
		- code/NodeJS_Essential_Trg
		
	- To delete directory, must use rmdir (see below)
		- Directory must be empty, else error thrown
	
	const fs = require("fs");
	fs.renameSync(currentFilePath, newFilePath);
	fs.rename(currentFilePath, newFilePath, (err) => {
		if (err) {
			throw err;
		}
		console.log("file successfully renamed");
	});
	
	fs.unlinkSync(currentFilePath); // delete file
	fs.unlink(currentFilePath, (err) => {
		if (err) {
			throw err;
		}
		
		console.log("file deleted");
	});
	
	fs.rmdir(dirToDelete, (err) => {
		if (err) {
			console.log(err);
		} else {
			console.log("Directory successfully deleted");
		}
	});
	
	fs.readdirSync("./accounts").forEach((file) => {
		fs.renameSync("./accounts/${file}", "./library/${file}");
	});
	
	console.log("File transferred from accounts to library");
	fs.rmdirSync("./accounts");
	console.log("accounts directory deleted");
	
-- 4-6 Streams in NodeJS --
	- Asynchronously handle continuous data flow
	- improve application handling of data

	
	Readable Streams:
		- process.stdin.on("data", function_to_execute);
		- fs.readFile(file_path, encoding, callback) problem:
			- execute callback only after entire file_path is read
			- if file is big, latency occurs
		- solution: use readable file stream
		- filestream breaks the data into chunks instead of reading entire file
		- don't have to wait for entire file to load to start reading data
		- similar to streaming video, where small chunks of videos loaded instead of downloading entire video before watching
		
		eg.
		const fs = require("fs");
		
		let stream = fs.createReadStream(file_path, file_encoding)
		stream.once("data", (chunk) => {
			console.log("Read stream started");
			console.log("==================");
			console.log(chunk);
		});
		
	Writable Streams:
		- write data chunks to file
		
		eg:
		
		const fs = require("fs");

		let answerStream;

		const questions = [
			"What is your name?",
			"Where do you live?",
			"What are you doing later?"
		];

		const answers = [];

		function ask(i) {
			process.stdout.write(`\n\n ${questions[i]}`);
			process.stdout.write(`   >   `);
		}

		process.stdin.once("data", (data) => { // first data is name input

			let name = data.toString().trim();
			let file_path = `./${name}.md`;

			if (fs.existsSync(file_path)) {
				fs.unlinkSync(file_path); // if file exist, remove it
			}
			answerStream = fs.createWriteStream(file_path);
			answerStream.write(`Question Answers for ${name} \n
			==========================\n
			`)
		});

		process.stdin.on("data", function(data) {
			let answer = data.toString().trim();
			
			answerStream.write(`Question: ${questions[answers.length]}\n`);

			answerStream.write(`Answers: ${answer}\n`, () => {
				if (answers.length < questions.length) {
					ask(answers.length);
				} else {
					process.exit();
				}
			});
			
			answers.push(answer);
		});

		process.on("exit", () => {

			answerStream.close();
			process.stdout.write(`\n\n`);
			console.log(answers);
		});

		ask(answers.length);


	
